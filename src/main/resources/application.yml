server:
  port: 8500
spring:
  application:
    name: durid-rocketmq-rule-dynamic-loglevel
  datasource:
    url: jdbc:mysql://localhost:3306/contract?autoReconnect=true&characterEncoding=UTF-8&useTimezone=true&serverTimezone=GMT%2B8
    username: contract
    password: contract
    #非必填 可以根据url自动判断
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      #初始连接数
      initial-size: 5
      #配置0,当线程池数量不足，自动补充。
      min-idle: 5
      #最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      #1.Destroy线程会检测连接的间隔时间
      #2.testWhileIdle的判断依据
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      #此项配置为true即可，不影响性能，并且保证安全性。意义为：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      #获取链接的时候，不校验是否可用，开启会有损性能。
      test-on-borrow: false
      #归还链接到连接池的时候校验链接是否可用。
      test-on-return: false
      # 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计,'wall'用于防火墙 防SQL注入的,log4j是用来输出统计数据的
      max-pool-prepared-statement-per-connection-size: 20
      # 配置stat filter
      filter:
        stat:
          enabled: true
      filters: stat,wall
      # 使用全局的多个数据源的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

      #如果logAbandoned=true,链接回收的时候控制台打印信息，测试环境可以加上true，线上环境false。会影响性能。
      log-abandoned: true
      #事务内查询超时时间，不确定的情况下建议不设置
      #transaction-query-timeout: 6000
      #removeAbandoned是连接池的高级功能，理论上这中配置不应该出现在实际的生产环境，因为有时应用程序执行长事务，可能这种情况下，会被连接池误回收，该种配置一般在程序测试阶段，为了定位连接泄漏的具体代码位置，被开启。
      #设置removeAbandoned="true"时，当连接池连接数到达(getNumIdle() < 2) and (getNumActive() > getMaxActive() - 3)  [空闲的连接小于2并且活动的连接大于(最大连接-3)] 时便会启动连接回收，
      #那种活动时间超过removeAbandonedTimeout="1800"的连接将会被回收
      remove-abandoned: false
      #超过时间限制时间（单位秒），目前为30分钟，根据业务可以适当调整。
      remove-abandoned-timeout: 1800
      #异步初始化
      async-init: true
      #必须要remove-abandoned为false才能生效，这样连接出问题的时候，每隔1分钟请求
      time-between-connect-error-millis: 30000
      #必须为false（失败后会不断请求数据库，请求在TIME-WAIT，在数据库服务重启后，所有等待请求会访问数据库），
      #为true连接失败，重试次数参数才会生效（：true表示pool向数据库上面的重试请求连接此时失败后标记整个pool为block并close，
      #就算后端数据库恢复正常也不进行重连，客户端对pool的请求都拒绝掉。false表示不会标记 pool为block，
      #新的请求都会尝试去数据库请求connection。
      #默认为false。因此，如果想让数据库和网络故障恢复之后，pool能继续请求正常资源必须把此项配置设为false）
      break-after-acquire-failure: false
      connection-error-retry-attempts: 3
      #打开后，对空闲连接进行保活处理，增强timeBetweenEvictionRunsMillis的周期性连接检查，minIdle内的空闲连接，
      #每次检查强制验证连接有效性. 参考：https://github.com/alibaba/druid/wiki/KeepAlive_cn
      keep-alive: false
      # ！！！请勿配置timeBetweenLogStatsMillis 会定时输出日志 并导致统计的sql清零
      #timeBetweenLogStatsMillis=2000
      # 配置监控服务器 是否启用StatFilter默认值false
      stat-view-servlet:
        # 是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）
        enabled: true
        login-username: druid
        login-password: druid
        #ip白名单
        allow:
        url-pattern: /druid/*
      web-stat-filter:
        enabled: true
        # Spring监控配置，对spring内部接口调用的监控 说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*, "
      #开启下面这个，会显示调用的具体接口以及参数信息
      aop-patterns: com.csy.druid.demo.web.*.*

mybatis-plus:
  mapper-locations: classpath*:mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.csy.summary.daily.beans
  global-config:
    db-config:
      #刷新mapper 调试神器
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: auto
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      #数据库大写下划线转换
      #capital-mode: true
      #驼峰下划线转换
      table-underline: true
      #逻辑删除配置
      #logic-delete-value: 0
      #logic-not-delete-value: 1
      #自定义填充策略接口实现
      #meta-object-handler: com.baomidou.springboot.xxx
      #自定义SQL注入器
      #sql-injector: com.baomidou.springboot.xxx
      insert-strategy: default
      update-strategy: default
      select-strategy: default
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false

#rocketmq:
#  # 生产者配置
#  producer:
#    isOnOff: on
#    # 发送同一类消息的设置为同一个group，保证唯一
#    groupName: rocketTestGroup
#    # 服务地址
#    namesrvAddr: 192.168.162.235:9876;192.168.162.239:9876
#    # 消息最大长度 默认1024*4(4M)
#    maxMessageSize: 4096
#    # 发送消息超时时间,默认3000
#    sendMsgTimeout: 3000
#    # 发送消息失败重试次数，默认2
#    retryTimesWhenSendFailed: 2
#  # 消费者配置
#  consumer:
#    isOnOff: on
#    # 官方建议：确保同一组中的每个消费者订阅相同的主题。
#    groupName: rocketTestGroup
#    # 服务地址
#    namesrvAddr: 192.168.162.235:9876;192.168.162.239:9876
#    # 接收该 Topic 下所有 Tag
#    topics: rocketTestTopic~*;
#    consumeThreadMin: 20
#    consumeThreadMax: 64
#    # 设置一次消费消息的条数，默认为1条
#    consumeMessageBatchMaxSize: 1
#  # 配置 Group  Topic  Tag
#  other:
#    testGroup: rocketTestGroup
#    testTopic: rocketTestTopic
#    testTag: rocketTestTag
dynamic:
  log:
    enable: true
    level: ERROR
    log-name: TEST-LOG-LEVEL

#配置分页插件pagehelper
pagehelper:
  #  helperDialect: mysql,如果是多类型数据源，不要配置，自动识别
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
  auto-runtime-dialect: true

